import { Router } from 'express';
import { InvestigationService } from '../services/InvestigationService';

export class InvestigationController {
    private router: Router;
    private investigationService: InvestigationService;

    constructor() {
        this.router = Router();
        this.investigationService = new InvestigationService();
        this.initializeRoutes();
    }

    private initializeRoutes(): void {
        this.router.post('/investigations', this.createInvestigation);
        this.router.get('/investigations/:id/actions', this.getAvailableActions);
        this.router.post('/investigations/:id/actions', this.performAction);
        this.router.put('/investigations/:id/progress', this.updateProgress);
    }

    private createInvestigation = async (req, res) => {
        try {
            const id = this.investigationService.createInvestigation(req.body);
            res.status(201).json({ id });
        } catch (error) {
            res.status(400).json({ error: error.message });
        }
    };

    private getAvailableActions = async (req, res) => {
        try {
            const actions = this.investigationService.getAvailableActions(
                req.params.id,
                req.query.characterId
            );
            res.json({ actions });
        } catch (error) {
            res.status(404).json({ error: error.message });
        }
    };

    private performAction = async (req, res) => {
        try {
            const result = this.investigationService.performAction(
                req.params.id,
                req.body.actionId,
                req.body.characterId
            );
            res.json(result);
        } catch (error) {
            res.status(400).json({ error: error.message });
        }
    };

    private updateProgress = async (req, res) => {
        try {
            this.investigationService.updateProgress(
                req.params.id,
                req.body.progress
            );
            res.status(204).send();
        } catch (error) {
            res.status(400).json({ error: error.message });
        }
    };

    public getRouter(): Router {
        return this.router;
    }
}
